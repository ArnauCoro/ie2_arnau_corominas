//ASSINGMENT 1
#include <iostream>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class CustomRectangleShape : public sf::RectangleShape {
public:
    CustomRectangleShape(const sf::Vector2f &size, const sf::Vector2f &position) : sf::RectangleShape(size) {
        setPosition(position);
    }

    void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key) {
        float dt = elapsed.asSeconds();
        if (key == sf::Keyboard::Left) {
            move(-x_speed_ * dt, 0);
        } else if (key == sf::Keyboard::Right) {
            move(x_speed_ * dt, 0);
        } else if (key == sf::Keyboard::Up) {
            move(0, -y_speed_ * dt);
        } else if (key == sf::Keyboard::Down) {
            move(0, y_speed_ * dt);
        }
        checkBounds();
    }

    bool isClicked(sf::Vector2i mouse_position) const {
        sf::FloatRect rectangle_bounds = getGlobalBounds();
        return rectangle_bounds.contains(static_cast<sf::Vector2f>(mouse_position));
    }

    void setSpeed(int x_speed, int y_speed) {
        x_speed_ = x_speed;
        y_speed_ = y_speed;
    }

private:
    void checkBounds() {
        sf::Vector2f position = getPosition();
        sf::Vector2f size = getSize();

        if (position.x < l_bound_)
            setPosition(l_bound_, position.y);
        if (position.x + size.x > r_bound_)
            setPosition(r_bound_ - size.x, position.y);
        if (position.y < u_bound_)
            setPosition(position.x, u_bound_);
        if (position.y + size.y > d_bound_)
            setPosition(position.x, d_bound_ - size.y);
    }

    float l_bound_ = 0;
    float r_bound_ = 0;
    float u_bound_ = 0;
    float d_bound_ = 0;
    int x_speed_ = 0;
    int y_speed_ = 0;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "My window");

    sf::Vector2f size(120.0, 60.0);
    sf::Vector2f position(120.0, 60.0);
    CustomRectangleShape rectangle_inh(size, position);
    rectangle_inh.setFillColor(sf::Color(150, 100, 50));
    rectangle_inh.setPosition(100, 100);
    rectangle_inh.setSpeed(100, 150);

    sf::Clock clock;

    // run the program as long as the window is open
    while (window.isOpen()) {
        sf::Time elapsed = clock.restart();

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
            else if (event.type == sf::Event::KeyPressed) {
                rectangle_inh.moveInDirection(elapsed, event.key.code);
            } else if (event.type == sf::Event::MouseButtonPressed) {
                if (rectangle_inh.isClicked(sf::Mouse::getPosition(window))) {
                    rectangle_inh.setFillColor(sf::Color(rand() % 256, rand() % 256, rand() % 256));
                }
            }
        }

        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        window.draw(rectangle_inh);

        // end the current frame
        window.display();
    }

    return 0;
}
//ASSINGMENT 2
#include <iostream>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <vector>
#include <ctime>

class CustomRectangleShape : public sf::RectangleShape {
public:
    CustomRectangleShape(const sf::Vector2f &size, const sf::Vector2f &position) : sf::RectangleShape(size), selected_(false) {
        setPosition(position);
    }

    void moveInDirection(const sf::Time &elapsed, const sf::Keyboard::Key &key) {
        if (selected_) {
            float dt = elapsed.asSeconds();
            if (key == sf::Keyboard::Left) {
                move(-x_speed_ * dt, 0);
            } else if (key == sf::Keyboard::Right) {
                move(x_speed_ * dt, 0);
            } else if (key == sf::Keyboard::Up) {
                move(0, -y_speed_ * dt);
            } else if (key == sf::Keyboard::Down) {
                move(0, y_speed_ * dt);
            }
            checkBounds();
        }
    }

    void setSpeed(int x_speed, int y_speed) {
        x_speed_ = x_speed;
        y_speed_ = y_speed;
    }

    void setBounds(float l_bound, float r_bound, float u_bound, float d_bound) {
        l_bound_ = l_bound;
        r_bound_ = r_bound;
        u_bound_ = u_bound;
        d_bound_ = d_bound;
    }

    void setSelected(bool selected) {
        selected_ = selected;
    }

    bool isSelected() const {
        return selected_;
    }

    bool isClicked(const sf::Vector2i &mouse_position) const {
        return getGlobalBounds().contains(static_cast<sf::Vector2f>(mouse_position));
    }

private:
    void checkBounds() {
        sf::Vector2f position = getPosition();
        sf::Vector2f size = getSize();

        if (position.x < l_bound_)
            setPosition(l_bound_, position.y);
        if (position.x + size.x > r_bound_)
            setPosition(r_bound_ - size.x, position.y);
        if (position.y < u_bound_)
            setPosition(position.x, u_bound_);
        if (position.y + size.y > d_bound_)
            setPosition(position.x, d_bound_ - size.y);
    }

    float l_bound_ = 0;
    float r_bound_ = 0;
    float u_bound_ = 0;
    float d_bound_ = 0;
    int x_speed_ = 0;
    int y_speed_ = 0;
    bool selected_;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "My window");

    std::srand(std::time(nullptr));

    std::vector<CustomRectangleShape> rectangles;

    for (int i = 0; i < 10; i++) {
        sf::Vector2f size(120.0, 60.0);
        sf::Vector2f position(std::rand() % (window.getSize().x - 120), std::rand() % (window.getSize().y - 60));
        rectangles.emplace_back(size, position);
    }

    for (auto &rec : rectangles) {
        rec.setFillColor(sf::Color(0, 255, 0));
        rec.setBounds(0, window.getSize().x, 0, window.getSize().y);
        rec.setSpeed(100, 200);
    }

    CustomRectangleShape *selectedRectangle = nullptr;

    // run the program as long as the window is open
    while (window.isOpen()) {
        sf::Time elapsed = sf::seconds(0.1f); // Arbitrarily chosen time for demonstration

        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event)) {
            // "close requested" event: we close the window
            if (event.type == sf::Event::Closed)
                window.close();
            else if (event.type == sf::Event::MouseButtonPressed) {
                // Deselect all rectangles
                for (auto &rec : rectangles) {
                    rec.setSelected(false);
                }

                // Check if any rectangle is clicked and select it
                for (auto &rec : rectangles) {
                    if (rec.isClicked(sf::Mouse::getPosition(window))) {
                        selectedRectangle = &rec;
                        rec.setSelected(true);
                        break;
                    }
                }
            } else if (event.type == sf::Event::KeyPressed) {
                if (selectedRectangle != nullptr) {
                    selectedRectangle->moveInDirection(elapsed, event.key.code);
                }
            }
        }

        // clear the window with black color
        window.clear(sf::Color::Black);

        // draw everything here...
        for (auto &rec : rectangles) {
            if (rec.isSelected()) {
                rec.setFillColor(sf::Color::Red);
            } else {
                rec.setFillColor(sf::Color(0, 255, 0));
            }
            window.draw(rec);
        }

        // end the current frame
        window.display();
    }

    return 0;
}
